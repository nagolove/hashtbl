#!/usr/bin/env lua

local inspect = require "inspect"

suffix = ""
first = string.byte('a')
last = string.byte('z')
len = 60

--print("args", inspect(arg))
for k = 1, #arg do
    --print(k, arg[k])
    local ok, errmsg = pcall(function()
        load(arg[k])()
    end)
    if not ok then
        print('errmsg', errmsg)
    end
end

first = string.byte(first)
last = string.byte(last)

local fname = string.format("string_data%s.h", suffix)
--print('fname', fname)

local matrix = {};
local strings_num = 10000
for i = 1, len do
    matrix[#matrix + 1] = first
end

function check_str(char_index, str)
    local res = false
    for i = 1, #str do
        res = res or string.char(char_index) ~= string.sub(str, i, i)
    end
    return res
end

function nexxt(arr)
    local index = 1
    for j = #arr, 1, -1 do
        index = j
        if arr[index] < last then
            break
        end
    end
   
    --[[
    if arr[index] > 255 then
        arr[index] = 255
    end
    --]]

    --[[
    if 
        string.char(arr[index] + 1) ~= '\"' or
        string.char(arr[index] + 1) ~= "\\" 
        then
        arr[index] = arr[index] + 2
    else
        arr[index] = arr[index] + 1
    end
    --]]

    arr[index] = arr[index] + 1
    return true
end

function to_str(arr)
    local s = ""
    for k, v in ipairs(arr) do
        s = s .. string.char(v)
    end
    return s
end

local stuff = {}

for i = 1, strings_num do
    nexxt(matrix) 
    if matrix[1] == last then
        break
    else
        local s = to_str(matrix)
        --print(s)
        table.insert(stuff, s)
    end
end

local f = io.open(fname, "w")
for i, str in ipairs(stuff) do
    f:write(string.format('{ "%s", %d }, \n', str, i))
end
f:close()
